import logging
from datetime import datetime, timedelta
from aiogram import F, types
from aiogram.filters import Command
from aiogram.enums.chat_member_status import ChatMemberStatus

from ..config import bot, dp
from ..database import Database
from ..utils import (
    is_moderator, get_user_id, get_user_mention, restrict_user, 
    lift_restrictions, log_action, pluralize, parse_duration, get_duration_display
)

logger = logging.getLogger(__name__)

_processed_messages = set()

@dp.message(Command(commands=["ban", "mute", "warn", "unban", "unmute", "warns", "clearwarns"]))
async def moderation_commands(message: types.Message):
    try:
        msg_key = f"{message.chat.id}:{message.message_id}:{message.from_user.id}"
        if msg_key in _processed_messages:
            return
        _processed_messages.add(msg_key)
        
        if len(_processed_messages) > 100:
            _processed_messages.clear()
        
        if not await is_moderator(message.chat.id, message.from_user.id):
            await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
            return
        
        cmd = message.text.split()[0][1:].lower()
        
        handlers = {
            "ban": cmd_ban,
            "mute": cmd_mute,
            "warn": cmd_warn,
            "unban": cmd_unban,
            "unmute": cmd_unmute,
            "warns": cmd_warns,
            "clearwarns": cmd_clearwarns
        }
        
        if cmd in handlers:
            await handlers[cmd](message)
        
        try:
            await message.delete()
        except:
            pass
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ moderation_commands: {e}")

async def cmd_ban(message: types.Message):
    try:
        parts = message.text.split(maxsplit=2)
        db = Database()
        
        if message.reply_to_message:
            tgt = message.reply_to_message.from_user
            reason = parts[1] if len(parts) > 1 else None
        else:
            if len(parts) < 2:
                await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return
            tgt = parts[1]
            reason = parts[2] if len(parts) > 2 else None
        
        uid = await get_user_id(message, tgt)
        if not uid:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        try:
            m = await bot.get_chat_member(message.chat.id, uid)
            if m.status == ChatMemberStatus.KICKED:
                await message.reply(f"‚ÑπÔ∏è {await get_user_mention(message.chat.id, uid)} —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω.")
                return
        except:
            pass
        
        try:
            await bot.ban_chat_member(message.chat.id, uid, until_date=0, revoke_messages=True)
            ban_status = "–∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —á–∞—Ç–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"
        except Exception as kick_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {kick_error}")
            ban_status = "–¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"
        
        db.add_ban(message.chat.id, uid)
        
        if message.reply_to_message:
            try:
                await bot.delete_message(message.chat.id, message.reply_to_message.message_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –±–∞–Ω–µ: {e}")
        
        await message.reply(
            f"üö´ {await get_user_mention(message.chat.id, uid)} {ban_status}.\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}"
        )
        log_action("Ban", message.from_user.id, uid, reason)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_ban: {e}", exc_info=True)
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}")

async def cmd_mute(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –º—É—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        parts = message.text.split(maxsplit=3)
        db = Database()
        
        if message.reply_to_message:
            tgt = message.reply_to_message.from_user
            dur_str = parts[1] if len(parts) > 1 else None
            reason = parts[2] if len(parts) > 2 else None
        else:
            if len(parts) < 2:
                await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return
            tgt = parts[1]
            dur_str = parts[2] if len(parts) > 2 else None
            reason = parts[3] if len(parts) > 3 else None
        
        uid = await get_user_id(message, tgt)
        if not uid:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        mute = db.get_mute(uid)
        now = datetime.now().timestamp()
        if mute and mute["until"] > now:
            until_dt = datetime.fromtimestamp(mute["until"])
            until_str = until_dt.strftime("%d.%m.%Y %H:%M")
            await message.reply(
                f"‚ÑπÔ∏è {await get_user_mention(message.chat.id, uid)} —É–∂–µ –≤ –º—É—Ç–µ –¥–æ {until_str}."
            )
            return
        
        duration = parse_duration(dur_str) or timedelta(hours=3)
        until = datetime.now() + duration
        until_ts = until.timestamp()
        
        await restrict_user(message.chat.id, uid, until_ts)
        db.add_mute(uid, message.chat.id, until_ts)
        
        if message.reply_to_message:
            try:
                await bot.delete_message(message.chat.id, message.reply_to_message.message_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –º—É—Ç–µ: {e}")
        
        try:
            member = await bot.get_chat_member(message.chat.id, uid)
            if not member.can_send_messages:
                status_emoji = "‚úÖ"
                status_text = "–∑–∞–º—É—á–µ–Ω"
            else:
                status_emoji = "‚ö†Ô∏è" 
                status_text = "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω"
        except:
            status_emoji = "‚úÖ"
            status_text = "–∑–∞–º—É—á–µ–Ω"
        
        reply_text = f"{status_emoji} {await get_user_mention(message.chat.id, uid)}, {status_text} –Ω–∞ {get_duration_display(duration)}."
        if reason:
            reply_text += f"\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            
        await message.reply(reply_text)
        log_action("Mute", message.from_user.id, uid, get_duration_display(duration))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_mute: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

async def cmd_warn(message: types.Message):
    try:
        parts = message.text.split(maxsplit=2)
        db = Database()
        
        if message.reply_to_message:
            tgt = message.reply_to_message.from_user
            reason = parts[1] if len(parts) > 1 else None
        else:
            if len(parts) < 2:
                await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return
            tgt = parts[1]
            reason = parts[2] if len(parts) > 2 else None
        
        uid = await get_user_id(message, tgt)
        if not uid:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        count = db.add_warn(uid)
        form = pluralize(count, "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
        
        if message.reply_to_message:
            try:
                await bot.delete_message(message.chat.id, message.reply_to_message.message_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏: {e}")
        
        text = f"‚ö†Ô∏è {await get_user_mention(message.chat.id, uid)} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.\n–í—Å–µ–≥–æ: {count} {form}."
        if reason:
            text += f"\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        
        if count >= 5:
            await bot.ban_chat_member(message.chat.id, uid, until_date=0, revoke_messages=True)
            db.add_ban(message.chat.id, uid)
            text += "\n\nüö´ –ê–≤—Ç–æ-–±–∞–Ω –∑–∞ 5 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π."
            log_action("Auto-ban 5 warns", 0, uid)
        
        await message.reply(text)
        log_action("Warn", message.from_user.id, uid, f"Total: {count}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_warn: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

async def cmd_unban(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        parts = message.text.split(maxsplit=1)
        db = Database()
        
        if message.reply_to_message:
            tgt = message.reply_to_message.from_user
        else:
            if len(parts) < 2:
                await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return
            tgt = parts[1]
        
        uid = await get_user_id(message, tgt)
        if not uid:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        ban = db.get_ban(message.chat.id, uid)
        if not ban:
            await message.reply(f"‚ÑπÔ∏è {await get_user_mention(message.chat.id, uid)} –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.")
            return
        
        db.remove_ban(message.chat.id, uid)
        
        try:
            await bot.unban_chat_member(message.chat.id, uid, only_if_banned=True)
            status_text = "‚úÖ –ë–∞–Ω —Å–Ω—è—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —á–∞—Ç"
        except Exception as api_error:
            if "supergroup and channel chats only" in str(api_error):
                status_text = "‚úÖ –ë–∞–Ω —Å–Ω—è—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–≤ –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö Telegram –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–±–∞–Ω —á–µ—Ä–µ–∑ API)"
            else:
                status_text = "‚úÖ –ë–∞–Ω —Å–Ω—è—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        
        await message.reply(f"{status_text}. {await get_user_mention(message.chat.id, uid)} –±–æ–ª—å—à–µ –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.")
        log_action("Unban", message.from_user.id, uid)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_unban: {e}", exc_info=True)
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}")

async def cmd_unmute(message: types.Message):
    try:
        parts = message.text.split(maxsplit=1)
        
        if message.reply_to_message:
            tgt = message.reply_to_message.from_user
        else:
            if len(parts) < 2:
                await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return
            tgt = parts[1]
        
        uid = await get_user_id(message, tgt)
        if not uid:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        db = Database()
        mute = db.get_mute(uid)
        if not mute:
            await message.reply(f"‚ÑπÔ∏è {await get_user_mention(message.chat.id, uid)} –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –º—É—Ç–µ.")
            return
        
        await lift_restrictions(message.chat.id, uid)
        
        try:
            member = await bot.get_chat_member(message.chat.id, uid)
            if member.can_send_messages:
                status_text = "‚úÖ –ú—É—Ç —Å–Ω—è—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ–±—â–∞—Ç—å—Å—è"
            else:
                status_text = "‚úÖ –ú—É—Ç —Å–Ω—è—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram –º–æ–≥—É—Ç –æ—Å—Ç–∞—Ç—å—Å—è"
        except:
            status_text = "‚úÖ –ú—É—Ç —Å–Ω—è—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
            
        await message.reply(f"{status_text}. {await get_user_mention(message.chat.id, uid)} –±–æ–ª—å—à–µ –Ω–µ –≤ –º—É—Ç–µ.")
        log_action("Unmute", message.from_user.id, uid)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_unmute: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

async def cmd_warns(message: types.Message):
    try:
        parts = message.text.split(maxsplit=1)
        db = Database()
        
        if message.reply_to_message:
            tgt = message.reply_to_message.from_user
        else:
            tgt = parts[1] if len(parts) > 1 else message.from_user
        
        uid = await get_user_id(message, tgt)
        if not uid:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        count = db.get_warns(uid)
        form = pluralize(count, "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
        await message.reply(f"‚ÑπÔ∏è {await get_user_mention(message.chat.id, uid)} –∏–º–µ–µ—Ç {count} {form}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_warns: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

async def cmd_clearwarns(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
    try:
        parts = message.text.split(maxsplit=1)
        db = Database()
        
        if message.reply_to_message:
            tgt = message.reply_to_message.from_user
        else:
            if len(parts) < 2:
                await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return
            tgt = parts[1]
        
        uid = await get_user_id(message, tgt)
        if not uid:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        old_count = db.clear_warns(uid)
        await message.reply(
            f"‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã ({old_count} ‚Üí 0) –¥–ª—è "
            f"{await get_user_mention(message.chat.id, uid)}."
        )
        log_action("Clear warns", message.from_user.id, uid)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_clearwarns: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")